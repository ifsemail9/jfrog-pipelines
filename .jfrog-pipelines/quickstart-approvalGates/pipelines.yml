template: true   # required for local templates
valuesFilePath: ./values.yml

resources:
  - name: myFirstRepo
    type: GitRepo
    configuration:
      # SCM integration where the repository is located
      gitProvider: {{ .Values.myRepo.gitProvider }} # this will be replaced from values.yml
      # Repository path, including org name/repo name
      path: {{ .Values.myRepo.path }} # this will be replaced from values.yml
      branches:
        # Specifies which branches will trigger dependent steps
        include: master

  - name: myPropertyBag
    type: PropertyBag
    configuration:
      commitSha: 1
      runID: 1
      
  #- name: cron_trigger_approval
   # type: CronTrigger
    #configuration:
     # interval: '0 1 * * *'       

pipelines:
  - name: Approval_Gates_Pipeline
    configuration:
      environmentVariables:
        readOnly:
          pipe_env1: value1
          pipe_env2:
            default: value1
            description: Optional description added in the yaml
            values:
              - value1
              - value2
              - value3  
    steps:
      - name: p1_s1
        type: Bash
        configuration:
          environmentVariables:
            step_env1:
              default: value1
              description: step env1 description
              values:
                - value1
                - value2
                - value3
              allowCustom: true
            step_env2: value2  
            step_env3:
              default: value1            
              description: this is step env3 description
              allowCustom: false              
          #inputResources:
            #- name: cron_trigger_approval
            # Sets up step to be triggered when there are commit events to myFirstRepo
            #- name: myFirstRepo1
        execution:
          onExecute:
            # Data from input resources is available as env variables in the step
            - echo $res_myFirstRepo2_commitSha
            # The next two commands add variables to run state, which is available to all downstream steps in this run
            # Run state documentation: https://www.jfrog.com/confluence/display/JFROG/Creating+Stateful+Pipelines#CreatingStatefulPipelines-RunState
            - add_run_variables current_runid=$run_id
            - add_run_variables commitSha=$res_myFirstRepo2_commitSha
            # This variable is written to pipeline state in p1_s3.
            # So this will be empty during first run and will be set to prior run number in subsequent runs
            # Pipeline state documentation: https://www.jfrog.com/confluence/display/JFROG/Creating+Stateful+Pipelines#CreatingStatefulPipelines-PipelineState
            - echo "Previous run ID is $prev_runid"

      - name: p1_s2
        type: Bash
        configuration:       
          inputSteps:
            - name: p1_s1
        execution:
          onExecute:
            # Demonstrates the availability of an env variable written to run state during p1_s1
            - echo $current_runid


#pipelines:
  #- name: MyApprovalGatesPipeline
    #steps:
      - name: approvalGatesStep
        type: Bash
        configuration:
          inputSteps:
            - name: p1_s2        
          requiresApproval:
            timeoutSeconds: 43200
            approvers:
              - rajeshg
            notifications:
              - integrationName: mySMTP #requires SMTP integration
                recipients:
                  - email@example.com
              - integrationName: mySlack #required Slack integration
        execution:
          onExecute:
            - echo "executing step..."
